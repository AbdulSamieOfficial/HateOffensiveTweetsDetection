# -*- coding: utf-8 -*-
"""Hate_Speech_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PFTHE4TbGCheCtlonQNtSwrsZJXHTDsf
"""

import pandas as pd
import numpy as np
import sys
import matplotlib as plt

from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import OneHotEncoder

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

# ----------Testing----------
# pd.set_option("display.max_rows", None, "display.max_columns", None)
# np.set_printoptions(threshold=sys.maxsize)

DataSet = pd.read_csv(r'labeled_data.csv')
# ----------Testing----------
# print(DataSet.head())
# print(DataSet.info())
# print(DataSet.describe().T)
DataSet.head()

DataSet.info()

dt_transformed = DataSet[['class','tweet']]
y = dt_transformed.iloc[:, :-1].values

#encoding the dependent variable
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])])
y = np.array(ct.fit_transform(y))

DataSet['class'].hist()
print('y=',y)

#up uptil this point the data has been slpit into 2 variables that will be used to fit hate speech and offensive speech models
y_df = pd.DataFrame(y)
y_hate = np.array(y_df[0])
y_offensive = np.array(y_df[1])
y_neither = np.array(y_df[2])

# ----------Testing----------
#print(y_hate)
#print(y_offensive)


#cleaning the texts
corpus = []
for i in range(0, 24783):
    review = re.sub('[^a-zA-Z]', ' ', dt_transformed['tweet'][i])
    review = review.lower()
    review = review.split()
    ps=PorterStemmer()
    all_stopwords = stopwords.words('english')
    all_stopwords.remove('not')
    review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
    review = ' '.join(review)
    corpus.append(review)
    
    # ----------Testing----------
# print(corpus)

cv = CountVectorizer(max_features = 2000)
x = cv.fit_transform(corpus).toarray()

#splitting data into training set 70% and test set 30%
x_train , x_test , y_train , y_test = train_test_split(x, y_hate, test_size=0.30, random_state= 0)

#naive bayes
classifier_np = GaussianNB()
classifier_np.fit(x_train, y_train)

#logistic regression
classifier_lr = LogisticRegression(random_state=0)
classifier_lr.fit(x_train, y_train)

#svm classifier
from sklearn import svm

classifier_svm = svm.SVC()
classifier_svm.fit(x_train, y_train)

#making confusion matrix for each model


#naive bayes
y_pred_np = classifier_np.predict(x_test)
cm= confusion_matrix(y_test, y_pred_np)
print(cm)

report = classification_report( y_test, y_pred_np )
print(report)

#SVM
y_pred_svm = classifier_svm.predict(x_test)
cm= confusion_matrix(y_test, y_pred_svm)
print(cm)

report_svm = classification_report( y_test, y_pred_svm )
print(report_svm)

#logistic regression
y_pred_lr = classifier_lr.predict(x_test)
cm = confusion_matrix(y_test, y_pred_lr)
print(cm)

report_lr = classification_report( y_test, y_pred_lr )
print(report_lr)

# the final evaluation by looking ta accuracies
svm_score=accuracy_score(y_test, y_pred_svm)
lr_score=accuracy_score(y_test, y_pred_lr)
np_score=accuracy_score(y_test, y_pred_np)


print('svm accuracy:', str(svm_score))
print('lr accuracy:', str(lr_score))
print('np accuracy:', str(np_score))